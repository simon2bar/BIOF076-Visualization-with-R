lincoln_weather
lincoln_weather %>% View
ggplot(lincoln_weather %>% arrange(as.character(Month)), aes(y = `Mean Temperature [F]`, x = Month, fill = `Mean Temperature [F]`)) +
geom_violin()
ggplot(lincoln_weather %>% arrange(as.character(Month)), aes(y = `Mean Temperature [F]`, x = Month, fill = stat(`Mean Temperature [F]`))) +
geom_violin()
ggplot(lincoln_weather %>% arrange(as.character(Month)), aes(y = `Mean Temperature [F]`, x = Month, fill = )) +
geom_violin()
ggplot(lincoln_weather %>% arrange(as.character(Month)), aes(y = `Mean Temperature [F]`, x = Month,  )) +
geom_violin()
ggplot(lincoln_weather), aes(y = `Mean Temperature [F]`, x = Month,  )) +
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,  )) +
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = `Mean Temperature [F]`  )) +
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = `Mean Temperature [F]`  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = `Mean Temperature [F]`  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin()
lincoln_weather <-  lincoln_weather %>% arrange(Month)
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
geom_boxplot(width=.1)
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month , fill=stat(y))) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
# geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month,fill = stat(y)  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin() +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month  )) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C")+
geom_violin(aes(fill = stat(y))) +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather,aes(y = `Mean Temperature [F]`, x = Month  )) +
geom_violin() +
geom_boxplot(width=.1) +
theme_bw()
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016')
View(movies)
library(gapminder)
gapminder
gapminder %>% View
devtools::install_github("eclarke/ggbeeswarm")
devtools::install_github("eclarke/ggbeeswarm")
library(ggbeeswarm)
knitr::include_graphics('../src/list_index.png')
knitr::include_graphics('../src/list_index.png')
c(1, 2, 3) * c(1, 2, 3, 4)
x <- c(1 1)
args(sum)
args(mean)
args(mean)
mean
mean
args(mean)
mean(x=vec)
vec <- c(1, 2, 3, 4, 5)
sum(vec)
mean(x=vec)
?sum
data("CO2")
knitr::opts_chunk$set(fig.height = 3, fig.width =5)
ggplot(mpg) +
geom_bar(aes(x=manufacturer)) +
xlab('Car Manufacturer') +
ylab('Number of Cars' ) +
ggtitle('Cars built in 2018 Q1 by Manufactuer') +
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1))
## guides
- we have two options:
- 1. change the name of the `class` column, or make a new column that has the name we want
```{r}
mpg$Type_Of_Car <- mpg$class
ggplot(mpg) +
geom_bar(aes(x=manufacturer, fill = Type_Of_Car)) +
xlab('Car Manufacturer') +
ylab('Number of Cars' ) +
ggtitle('Cars built in 2018 Q1 by Manufactuer') +
theme_minimal()+
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1), text = element_text(family ='Palatino' ))
```
- or option 2, use the `guides` function. For guides we set a value for the aesthetic within the `geom` we want to change ,  in this case `fill`. Next we choose a guide for the graphical parameter associated with that aesthetic we want to change, ie `guide_legend`
```{r}
ggplot(mpg) +
geom_bar(aes(x=manufacturer, fill = class)) +
xlab('Car Manufacturer') +
ylab('Number of Cars' ) +
ggtitle('Cars built in 2018 Q1 by Manufactuer') +
theme_minimal()+
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1), text = element_text(family ='Palatino' )) +
guides(fill = guide_legend(title = 'Type of Car', title.position = 'left'))
```
- while the text of legend cannot be changed inside theme, the position can be by changing the
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
theme_classic()
data(iris)
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_continuous()+
theme_classic()
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins", label = "Number of bins:", min = 1,max = 50, value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp('shiny_examples/basic_app.R')
runApp('shiny_examples/basic_app.R')
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins", label = "Number of bins:", min = 1,max = 50, value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp('shiny_examples/basic_app.R')
runApp('shiny_examples/basic_app.R')
?sidebarLayout
sf
coord_sf
library(ggspatial)
?coord_sf
library(transformr)
devtools::install_github("thomasp85/transformr")
devtools::install_github("thomasp85/tweenr")
?server
install.packages("dslabs")
renderText()
?renderText
?inpt
View(mtcars)
library(holepunch)
holepunch::write_dockerfile()
write_compendium_description()
holepunch::write_dockerfile()
R
holepunch::write_dockerfile()
holepunch::generate_badge()
renderText
library(shiny)
R
ui <- fluidPage(
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('TEST')
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel()
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
sliderInput(inputId = "XMB", min = 0, max=10)
)
)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
sliderInput(inputId = "XMB", min = 0, max=10, value = 2)
)
)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
sliderInput(inputId = "XMB",label = 'smooby', min = 0, max=10, value = 2)
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
plotOutput()
)
)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
plotOutput(outputId = 'dsf')
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('TEST'),
mainPanel(
plotOutput(outputId = 'dsf'),
selectInput(inputId = 'das', label = 'choose', selected = "", choices = c("", 'asd'))
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
devtools::install_deps()
?devtools::install_deps()
coolbutuseless/ggpattern,
hrbrmstr/hrbrthemes,
jokergoo/ComplexHeatmap,
tidyverse/dplyr,
vinay-swamy/RBedtools,
knitr::opts_chunk$set(fig.height = 3, fig.width =5)
ggplot() +
geom_hline(yintercept = 5, color = 'blue') +
geom_vline(xintercept = 5 color = 'red')
ggplot() +
geom_hline(yintercept = 5, color = 'blue') +
geom_vline(xintercept = 5, color = 'red')
library(tidyverse)
ggplot() +
geom_hline(yintercept = 5, color = 'blue') +
geom_vline(xintercept = 5, color = 'red')
length(colors())
library(patchwork)
plot_pal <- function(cols){
pdata <- tibble(col = cols, x= seq(1, length(cols)), y=0)
cv <- cols
names(cv) <- cv
plot <- ggplot(pdata) +
geom_tile(aes(x=x, y=y,fill = col), width = 1, height= .5) +
scale_fill_manual(values=cv) +
theme_void()+
theme(legend.position = 'none')
return(plot)
}
str(cols)
library(RColorBrewer)
library(RColorBrewer)
library(pals)
library(pals)
plot_pal(cols =pals::brewer.blues(10) )
plot_pal(cols =pals::brewer.blues(12))
display.brewer.all()
pals::brewer.rdbu() %>% plot_pal
pals::brewer.rdbu(12) %>% plot_pal
plot_pal(pals::brewer.rdbu(12) )
plot_pal(pals::brewer.rdbu(12) )
plot_pal(pals::viridis(12))
plot_pal(pals::magma(12))
pals::ocean.thermal(12) %>% plot_pal()
plot_pal(pals::jet(12))
plot_pal(pals::jet(12))
plot_pal(pals::jet(30))
library(RColorBrewer)
RColorBrewer::display.brewer.all()
alphabet(4)
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_continuous(type = pals::brewer.blues)+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_continuous(type = pals::brewer.blues(10))+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_continuous(breaks =  pals::brewer.blues(10))+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_continuous(breaks =  pals::viridis(10))+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_gradientn(colors = pals::brewer.reds(100))
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_gradientn(colors = pals::brewer.reds(100))
theme_classic()
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_gradientn(colors = pals::brewer.reds(100))+
theme_classic()
pal = RColorBrewer::brewer.pal(3, 'Pastel1')
ggplot(iris)  +
geom_boxplot(aes(x=Species, y=Petal.Length, fill = Species))+
scale_color_discrete(type = pal)+
theme_classic()
pals::brewer.reds(100)
plot_pal(pal)
ggplot(iris)  +
geom_point(aes(x=Sepal.Length, Petal.Length, color = Sepal.Width))+
scale_color_gradientn(colors = pals::brewer.reds(100))+
theme_classic()
ggplot(iris)  +
geom_boxplot(aes(x=Species, y=Petal.Length, fill = Species))+
scale_fill_discrete(type = pal)+
theme_classic()
pal = RColorBrewer::brewer.pal(3, 'Pastel1')
ggplot(iris)  +
geom_boxplot(aes(x=Species, y=Petal.Length, fill = Species))+
scale_fill_discrete(type = pal)+
theme_classic()
pal = pals::alphabet()
pal = pals::alphabet()
names(pal) <- NULL
ggplot(iris)  +
geom_boxplot(aes(x=Species, y=Petal.Length, fill = Species))+
scale_fill_discrete(type = pal)+
theme_classic()
iris
arrange(iris, Sepal.Width)
arrange(iris, desc(Sepal.Width))
arrange(iris, desc(Sepal.Width))
tibble(x=rnorm(100), y=rnorm(100))
tb <- tibble(x=rnorm(100), y=rnorm(100))
head(tb)
?across
economics_long %>% group_by(date) %>% summarise(avg_value_per_day = mean(value))
pull(iris, Sepal.Width) %>% head
iris %>% pull(Sepal.Width) %>% sum(.)
iris %>% pull(Sepal.Width) %>% .[1]
?str_match
rbind(iris, iris)
rbind(iris, iris) %>% nrow
## merging tabular data
```{r}
nrow(iris)
knitr::opts_chunk$set(fig.height = 3, fig.width =5)
p_data <- data.frame(specie = unique(iris$Species), flower.diameter = c(100,200,300))
res <- rbind(p_data, p_data)
View(p_data)
View(res)
p_data <- data.frame(specie = unique(iris$Species), flower.diameter = c(100,200,300))
p_data <- data.frame(Species = c(unique(iris$Species)), avg_height = c(1000,2000, 3000))
p_data
p_data <- data.frame(Species = unique(iris$Species), avg_height = c(1000,2000, 3000))
p_data
ggplot(p_data)+
geom_col(aes(x=specie, y=flower.diameter))
library(tidyverse)
ggplot(p_data)+
geom_col(aes(x=specie, y=flower.diameter))
ggplot(p_data)+
geom_col(aes(x=specie, y=flower.diameter))
ggplot(p_data)+
geom_col(aes(x=Species, y= avg_height))
ggplot(p_data)+
geom_col(aes(x=Species, y= avg_height, fill = Species), width = .5)
ggplot(p_data)+
geom_col(aes(x=Species, y= avg_height, fill = Species), width = .25)
plot <- ggplot(mpg) +
geom_bar(aes(x=manufacturer)) +
xlab('Car Manufacturer') +
ylab('Number of Cars' )
ggsave(plot, filename = 'ggsave.png')
setwd('/')
dir() %>% print
read_tsv('/Users/swamyvs/personal/BIOF076-Visualization-with-R/day_1/dummy.tsv' ) %>% print
df <- mutate(airquality, temp_zone = ifelse(Temp > 75, 'HIGH', 'LOW'))
df
as_tibble(df)
df <- mutate(airquality, temp_zone = ifelse(Temp > 75, 'HIGH', 'LOW'))
as_tibble(df)
mutae(airquality, Ozone = -1)
economics
select(mpg, model)
tibble(airquality)
tibble(iris)
tibble(iris)
class(iris)
iris_tbl <- as_tibble(iris)
class(iris_tbl)
setwd('/')
dir() %>% print
read_tsv('/Users/swamyvs/personal/BIOF076-Visualization-with-R/day_1/dummy.tsv',  ) %>% print
dir() %>% print
setwd('/')
dir() %>% print
iris %>% pull(Sepal.Width) %>% head %>% print
iris %>% pull(Sepal.Width) %>% .[1]
data("starwars")
data("starwars")
starwars
data("starwars")
starwars
iris$Sepal.Length
mpg
mpg$trans <- replace(x = mpg$trans, list = mpg$trans == 'auto(l5)', 'auto L-5')
mpg
audi <- grepl(pattern = 'audi', mpg$manufacturer)
mpg[audi, ]
head(mpg)
nrow(mpg[audi, ])
nrow(mpg)
head(mpg[audi, ])
data("airquality")
airquality
vec <- rnorm(10000, 0, sd=10)
tf <- c(TRUE, FALSE)
as.numeric(tf)
data(mpg)
pal
unique(iris$Species)
col_vec <- c('setosa' = 'blue','versicolor' = 'purple',  'virginica' = 'red')
col_vec <- c('setosa' = 'blue','versicolor' = 'purple',  'virginica' = 'red')
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species)) +
scale_fill_manual(values = col_vec)
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species), width = .5) +
scale_fill_manual(values = col_vec)
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species), width = .25) +
scale_fill_manual(values = col_vec)
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species), width = .25, size = 6) +
scale_fill_manual(values = col_vec)
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species), width = .25)+
scale_fill_manual(values = col_vec)
ggplot(iris) +
geom_boxplot(aes(x=Species, y= Sepal.Width, fill = Species), width = .25)+
scale_fill_manual(values = col_vec)  +
theme_classic()
?theme
ggplot(mpg) +
geom_bar(aes(x=manufacturer, fill = class))
data()
library(gapminder)
gapmminder()
gapmminder
gapminder
storms
unique(storms$status)
library(dplyr)
data("storms")
data("storms")
Storms
storms
source('../src/plot_pal.R')
library(pals)
plot_pal(pals::alphabet())
View(storms)
