cbind(iris, iris) %>% dim
iris_small <- iris[1:50, 1:3]
dim(iris_small)
dim(iris)
rbind(iris_small,iris)
cbind(iris_small,iris, )
bind(iris_small,iris )
cbind(iris_small,iris )
cbind(iris, iris_small)
iris_small[100:120,7:8]
cb_irisÂºcbind(iris, iris_small)
cb_iris <- cbind(iris, iris_small)
iris_small[100:120,7:8]
cb_iris[100:120,7:8]
cb_iris[120:100,7:8]
cb_iris[,7:8]
any(is.na(cb_iris))
?cbind
cb_iris <- cbind(iris, iris_small)
cb_iris[,7:8]
iris_small
iris
cb_iris <- cbind(iris, iris_small)
View(cb_iris)
colnames(iris_small) <- c('a', 'b', 'c')
rbind(iris, iris) %>% dim
cbind(iris, iris) %>% dim
iris_small <- iris[1:50, 1:3]
dim(iris_small)
colnames(iris_small) <- c('a', 'b', 'c')
cb_iris <- cbind(iris, iris_small)
cb_iris[,7:8]
cb_iris <- cbind(iris, iris_small) %>% View
iris_small <- iris[1:5, 1:3]
colnames(iris_small) <- c('a', 'b', 'c')
dim(iris_small)
cb_iris <- cbind(iris, iris_small) %>% View
## merging uneven tabular data
```{r}
dim(iris)
```
bind_row(iris, iris_small)
bind_rows(iris, iris_small)
bind_rows(iris, iris) %>% dim
bind_cols(iris, iris) %>% dim
bind_cols(iris, iris) %>% dim
bind_rows(iris, iris_small)
cb_iris <- bind_cols(iris, iris_small)
cb_iris <- bind_cols(iris, iris_small)
cb_iris[,7:8]
cb_iris <- bind_cols(iris, iris_small)
cb_iris <- bind_cols(iris, iris_small[1:5,])
cb_iris <- bind_cols(iris, iris_small[1:2,])
cb_iris <- bind_cols(iris, iris_small)
cb_iris <- bind_cols(list(iris, iris_small) )
cb_iris <- bind_cols( iris_small, iris)
cb_iris <- bind_cols( iris_small, iris)
cb_iris <- bind_cols( iris_small, iris)
data(dplyr)
data()
band_instruments %>% View
band_instruments2
?left_join
iris %>% head()
tibble(Species = rep(unique(iris$Species), 2) %>% sort)
tibble(Species = rep(unique(iris$Species), 2) %>% sort, subspecies= c('pansage', 'simisage', 'oddish', 'vileplume', 'chicorita', 'bayleef'))
tibble(Species = rep(unique(iris$Species), 2) %>% sort, subspecies= c('pansage', 'simisage', 'oddish', 'vileplume', 'chicorita', 'bayleef'))
cars
mpg
mpg
mpg %>% as_tibble
tibble(model= unique(mpg$model), fuel_type = sample(c('gas', 'diesel', n_distinct(mpg$model) ,replace= T)) )
tibble(model= unique(mpg$model),
fuel_type = sample(c('gas', 'diesel'), n_distinct(mpg$model) ,replace= T))
model2fuel <- tibble(model= unique(mpg$model),
fuel_type = sample(c('gas', 'diesel'), n_distinct(mpg$model) ,replace= T))
model2fuel
mpg %>% select(model, cty) %>% left_join(x=., y=model2fuel)
mpg %>% select(model, cty) %>% left_join(x=., y=model2fuel, by = 'model')
cty_by_fueltype
cty_by_fueltype <-  mpg %>% select(model, cty) %>% left_join(x=., y=model2fuel, by = 'model')
cty_by_fueltype
ggplot(cty_by_fueltype) +
geom_boxplot(aes(x = fuel_type, y=cty, fill = fuel_type))
ggplot(cty_by_fueltype) +
geom_boxplot(aes(x = fuel_type, y=cty, fill = fuel_type), width = .5) +
theme_classic
ggplot(cty_by_fueltype) +
geom_boxplot(aes(x = fuel_type, y=cty, fill = fuel_type), width = .5) +
theme_classic()
ggplot(cty_by_fueltype) +
geom_boxplot(aes(x = fuel_type, y=cty, fill = fuel_type), width = .25) +
theme_classic()
model2fuel[1:2, ]
model2fuel[1:2, ] %>% left_join(mpg) %>% filter(!grepl('a4',model)) %>% select(model, fuel_type)
model2fuel[1:2, ] %>% left_join(mpg ,.) %>% filter(!grepl('a4',model)) %>% select(model, fuel_type)
model2fuel[1:2, ] %>% left_join(mpg ,.) %>% filter(!grepl('a4',model)) %>% select(model, fuel_type)
model2fuel[1:2, ] %>% left_join(mpg) %>% filter(!grepl('a4',model)) %>% select(model, fuel_type)
model2fuel[1:2, ] %>% left_join(mpg) %>% filter(!grepl('a4',model))
model2fuel[1:2, ] %>% left_join(mpg)
model2fuel[1:2, ] %>% left_join(mpg)  %>% select(model, fuel_type)
model2fuel[1:2, ] %>% inner_join(mpg,.) %>% select(model, fuel_type)
model2fuel[1:2, ] %>% full_join(mpg,.) %>% select(model, fuel_type)
filter(mpg, model == 'a4')
a4_only <- filter(mpg, model == 'a4')
dim(a4_only)
filter(model2fuel, model == 'a4') %>% rep(10) %>% bind_rows
filter(model2fuel, model == 'a4') %>% rep(10) %>% do.call(rbind)
filter(model2fuel, model == 'a4') %>% rep(10) %>% do.call(rbind,.)
filter(model2fuel, model == 'a4') %>% rep(.,10) %>% do.call(rbind,.)
?rep
filter(model2fuel, model == 'a4') %>% rep(.,times = 10) %>% do.call(rbind,.)
k <- filter(model2fuel, model == 'a4') %>% rep(.,times = 10) %>% do.call(rbind,.)
View(k)
k <- filter(model2fuel, model == 'a4') #%>% rep(.,times = 10) %>% do.call(rbind,.)
View(k)
rep(k, 4)
k <- filter(model2fuel, model == 'a4') bind_rows(. ,. ,. ,. ,. ,.)
k <- filter(model2fuel, model == 'a4') %>% bind_rows(. ,. ,. ,. ,. ,.)
k <- filter(model2fuel, model == 'a4') %>% bind_rows(. ,. ,. ,. ,. ,.)
a4_fuel <- filter(model2fuel, model == 'a4') %>% bind_rows(. ,. ,. ,. ,. ,.)
dim(a4_fuel)
left_join(a4_only, a4_only)
left_join(a4_only, a4_fuel, by= 'model')
left_join(a4_only, a4_fuel, by= 'model') %>% dim
gtf <- rtracklayer::readGFF('~/Downloads/gencode.v28.annotation.gtf.gz')
View(gtf)
gtf_trim <-  gtf %>% filter(trancript_type == 'protein_coding') %>% select(gene_name) %>% sample_n(5) %>% inner_join(gtf)
gtf_trim <-  gtf %>% filter(transcript_type == 'protein_coding') %>% select(gene_name) %>% sample_n(5) %>% inner_join(gtf)
View(gtf_trim)
write_tsv(gtf_trim, 'src/gtf_example.tsv.gz')
k <- read_tsv('src/tx_expression_subset.tsv.gz')
View(k)
gtf_trim <-  gtf %>% filter(gene_name %in% c('DCX' , 'GRM3' , 'MYO7A'))
write_tsv(gtf_trim, 'src/gtf_example.tsv.gz')
sum(gtf_trim$transcript_id %in% k$transcript_id)
filter(k, gene_name %in% c('DCX' , 'GRM3' , 'MYO7A'))
filter(k, gene_name %in% c('DCX' , 'GRM3' , 'MYO7A')) %>% nrow
filter(k, gene_name %in% c('DCX' , 'GRM3' , 'MYO7A'))
k %>% select(-gene_name) %>% write_tsv(('src/tx_expression_subset.tsv.gz')
k %>% select(-gene_name) %>% write_tsv('src/tx_expression_subset.tsv.gz')
getwd()
left_join(a4_only, a4_fuel %>% distinct, by= 'model') %>% dim
library(gapminder)
gapminder
unique(gapminder$country)
gapminder_bygender <- gapminder %>%
mutate(gender = sample(c('male', 'female', nrow(gapminder_bygender)/2)))
library(gapminder)
library(tidyverse)
gapminder_bygender <- gapminder %>%
mutate(gender = sample(c('male', 'female', nrow(gapminder)/2)))
mutate(gender = sample(c('male', 'female'_, nrow(gapminder)/2))
gapminder_bygender <- gapminder %>%
mutate(gender = sample(c('male', 'female'), nrow(gapminder)/2))
nrow(gapminder)/2
sample(c('male', 'female'), nrow(gapminder)/2)
gapminder_bygender <- gapminder %>%
mutate(gender = sample(c('male', 'female'), nrow(gapminder)/2, replace = T))
sample(c('male', 'female'), nrow(gapminder)/2, replace = T)
sample(c('male', 'female'), nrow(gapminder)/2, replace = T) %>% length
gapminder_bygender <- gapminder %>%
mutate(gender = sample(c('male', 'female'), nrow(gapminder), replace = T))
ggline(d, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"))
ggline(d, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"))
library(ggpubr)
ggline(d, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"))
ggline(ToothGrowth, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"))
ggline(ToothGrowth, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"), add='mean')
ggline(ToothGrowth, x = "dose", y = "len",
add = "mean_se")
ggline(ToothGrowth, x = "dose", y = "len",
add = "mean_se",  palette = c("#00AFBB", "#E7B800"))
ggline(ToothGrowth, "dose", "len",
linetype = "supp", shape = "supp",
color = "supp", palette = c("#00AFBB", "#E7B800"), add='mean_se')
library(devtools)
install_github
install_github('vinayswamy/BIOF076-Visualization-with-R')
install_github('vinay-swamy/BIOF076-Visualization-with-R')
iris_dfac <-  iris %>% mutate(dfac = sample(c('long', 'short'),size = nrow(.), replace = T)) %>% group_by(Species, dfac) %>%
summarise(dcol = n())
ggplot(iris_dfac)+
geom_col_pattern(aes(x=Species, y=dcol, pattern_density = dfac, fill = Species),
pattern_color = 'white',
color='black',
position = 'dodge', pattern_fill = 'white',
pattern= 'crosshatch')  +
theme_classic()
ggplot(iris) +
geom_boxplot(aes(x= Species, y= Sepal.Length, fill = Species)) +
hrbrthemes::theme_ipsum_es()
library("ggsci")
data(diamonds)
library("ggsci")
data(diamonds)
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.05, size = 1, span = 1) +
theme_bw()
p1
diamonds <- diamonds %>% mutate(cut = factor(cut))
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.05, size = 1, span = 1) +
theme_bw()
p1
diamonds <- diamonds %>% mutate(cut = as.character(cut))
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.05, size = 1, span = 1) +
theme_bw()
p1
p1
p1 + scale_color_npg()
p1 + scale_color_npg() + cowplot::theme_cowplot()
p1 + scale_color_npg() +
library("ggsci")
library("ggsci")
data(diamonds)
diamonds <- diamonds %>% mutate(cut = as.character(cut))
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.05, size = 1, span = 1) +
theme_bw()
p1
p1 + scale_color_npg()
p1 + scale_color_aaas()
library(rnaturalearth)
library(rnaturalearthdata)
world <- ne_countries(scale = "medium", returnclass = "sf")
quakes_sf <- quakes %>% st_as_sf(coords = c("long", "lat"),crs = 3460 ) %>% as_tibble
data("economics_long")
force(economics_long)
View(economics_long)
ggplot(line)+
geom_line(aes(x=date, y=value, color = variable))
ggplot(economics_long)+
geom_line(aes(x=date, y=value, color = variable))
ggplot(economics_long)+
geom_line(aes(x=date, y=value01, color = variable))
library(gganimate)
remove.packages('tweenr')
install.packages('tweenr')
library(gganimate)
data("economics_long")
ggplot(economics_long)  +
geom_line(aes(x=date, y=value01, color = variable)) +
ggplot(economics_long)  +
geom_line(aes(x=date, y=value01, color = variable)) +
transition_reveal(date)
ani_plot <- ggplot(economics_long)  +
geom_line(aes(x=date, y=value01, color = variable)) +
theme_bw()+
transition_reveal(date)
anim_save('../src/economic_lg_ani.gif', ani_plot)
remove.packages('RBedtools')
devtools::install_github('vinay-swamy/RBedtools', upgrade = F)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
nc
str(nc)
class(nc)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
nc
class(nc)
## the `sf` package
```{r}
arrests <- USArrests %>% rownames_to_column('state')
arrests
```
data("quakes")
quakes
getwd()
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Most basic bubble plot
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)%>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country))
write_tsv(data, '../src/gapminder_2007.tsv.gz')
colnames(gapminder)
ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)%>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country))
write_tsv(data, '../src/gapminder_2007.tsv.gz')
ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)%>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country))
write_tsv(data, '../src/gapminder_2007.tsv.gz')
ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)%>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country))
write_tsv(data, '../src/gapminder_2007.tsv.gz')
ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
p <- ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
ggsave(p, '../src/gapminder_bubbleplot.png')
p <- ggplot(data,  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
ggsave(p, '../src/gapminder_bubbleplot.png')
ggsave(p, filename = '../src/gapminder_bubbleplot.png')
ggsave(plot = p, filename = '../src/gapminder_bubbleplot.png')
## customizing multiple aesthetics
- the `gapminder` dataset is a popular example dataset about the life expectancy, GDP and population for differnt countries across the world
![](../src/gapminder_bubbleplot.png)
```{r, fig.height=4}
library(ggplot2)
library(dplyr)
data <- read_tsv('../src/gapminder_2007.tsv.gz')
ggplot(iris , aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point(size = 1)
ggplot(iris , aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point(size = 3)
ggplot(iris , aes(x=Sepal.Length, y=Sepal.Width, color = Species)) +
geom_point(size = 3, alpha = .5)
col_vec <- c('setosa' = 'blue','versicolor' = 'purple',  'virginica' = 'red')
ggplot(iris) +
geom_boxplot(aes(x= Species, y= Sepal.Width)) +
scale_fill_manual(values = col_vec)  +
theme_classic()
ggplot(iris) +
geom_boxplot(aes(x= Species, y= Sepal.Width, fill = Species)) +
scale_fill_manual(values = col_vec)  +
theme_classic()
ggplot(iris) +
geom_boxplot(aes(x= Species, y= Sepal.Width, fill = Species), width = .1) +
scale_fill_manual(values = col_vec)  +
theme_classic()
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.5, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
anim_save('../src/gapminder_bubble_animated)
anim_save('../src/gapminder_bubble_animated.gif', p)
anim_save('../src/gapminder_bubble_animated.gif', p)
anim_save('src/gapminder_bubble_animated.gif', p)
data <- read_csv('../src/health.csv.gz')
View(data)
data %>% pivot_longer(-Area, names_to='year', values_to = 'percent')
data %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct'))
data %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
gggplot(data) +
geom_point(x=percent, y=Area)
ggplot(data) +
geom_point(x=percent, y=Area)
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
ggplot(data) +
geom_point(x=percent, y=Area)
geom_point(aes((x=percent, y=Area))
ggplot(data) +
ggplot(data) +
geom_point(aes(x=percent, y=Area))
ggplot(data) +
geom_point(aes(x=percent, y=Area))
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
ggplot(data) +
geom_point(aes(x=percent, y=Area))
```{r, fig.width=4}
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
ggplot(data) +
geom_point(aes(x=percent, y=Area))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year))
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year))
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_'))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_void()
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_')) %>% arrange(year,percent)
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_')) %>% arrange(year,percent) %>% mutate(Area = factor)
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_')) %>% arrange(year,percent) %>% mutate(Area = factor(Area, levels=Area))
data <- read_csv('../src/health.csv.gz') %>% pivot_longer(-Area, names_to='year', values_to = 'percent') %>% mutate(year = str_remove(year, 'pct_')) %>% arrange(year,percent) %>% mutate(Area = factor(Area, levels=unique(Area)))
data <- read_csv('../src/health.csv.gz') %>%
pivot_longer(-Area, names_to='year', values_to = 'percent') %>%
mutate(year = str_remove(year, 'pct_')) %>%
arrange(year,percent) %>% mutate(Area = factor(Area, levels=unique(Area)))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
data <- read_csv('../src/health.csv.gz') %>%
pivot_longer(-Area, names_to='year', values_to = 'percent') %>%
mutate(year = str_remove(year, 'pct_')) %>%
arrange(year,percent) %>% mutate(Area = factor(Area, levels=unique(Area)))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
data <- read_csv('../src/health.csv.gz') %>%
pivot_longer(-Area, names_to='year', values_to = 'percent') %>%
mutate(year = str_remove(year, 'pct_')) %>%
arrange(year,percent) %>% mutate(Area = factor(Area, levels=unique(Area)))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
geom_line(aes(x=percent, group = Area))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
geom_line(aes(x=percent,y=Area group = Area))
ggplot(data) +
geom_point(aes(x=percent, y=Area, color= year)) +
geom_line(aes(x=percent,y=Area, group = Area))
ggplot(data) +
geom_line(aes(x=percent,y=Area, group = Area))+
geom_point(aes(x=percent, y=Area, color= year)) +
theme_bw()
data <- read_csv('../src/health.csv.gz') %>%
pivot_longer(-Area, names_to='year', values_to = 'percent') %>%
mutate(year = str_remove(year, 'pct_'))
write_tsv(data, '../src/US_health.tsv.gz')
ggplot(mpg) +
geom_boxplot(aes(x=manufacturer, y=cty)) +
facet_wrap(~class) +
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mpg) +
geom_bar(aes(x=class))
ggplot(mpg) +
geom_bar(aes(x=class, fill = class))
mpg_count <- mpg %>% group_by(class) %>% summarise(count = n())
ggplot(mpg_count) +
geom_col(aes(x=class, y=count, fill = class))
mpg_count_arranges <- mpg_count %>% arrange(count)
ggplot(mpg_count) +
geom_col(aes(x=class, y=count, fill = class))
mpg_count_arranges <- mpg_count %>% arrange(count) %>% mutate(class = factor(class, levels = class))
ggplot(mpg_count) +
geom_col(aes(x=class, y=count, fill = class))
mpg_count %>% arrange(count)
mpg_count_arranges <- mpg_count %>% arrange(count)
ggplot(mpg_count_arranges) +
geom_col(aes(x=class, y=count, fill = class))
mpg_count_arranges <- mpg_count %>% arrange(count) %>% mutate(class = factor(class, levels = class))
ggplot(mpg_count_arranges) +
geom_col(aes(x=class, y=count, fill = class))
char_vec <- c('a', 'a', 'a', 'b', 'b', 'c')
char_vec
char_vec_factor <- factor(char_vec)
char_vec_factor
levels(char_vec_factor)
factor(char_vec, levels = c('a', 'a', 'b', 'c'))
factor(char_vec, levels = c('a', 'a', 'b', 'c'))
char_vec_factor_arr <- factor(char_vec, levels =c('b', 'a', 'c') )
char_vec_factor_arr
sort(char_vec_factor_arr)
